#!/bin/sh

# Note: only stderr is saved into Mender logs, for everything else use the logfile
script_name=$(basename "$0")
# Usually the script file is located at /data/mender/scripts/<script_name> but it might vary.
# We want to store logs at /data/mender/<script_name>.log
script_path=$(readlink -f "$0")
logfile="${script_path%/*}/../${script_name}.log"
# Create an array to store temporary file names
temp_files=()

mnt=
UBOOTVARS="bootcount mender_boot_part mender_boot_part_hex upgrade_available"
ubvarfile=
install_fwenv=


cleanup() {
    echo "Cleaning up" | tee -a $logfile
    [ -n "$mnt" ] || return
    for d in sys proc dev run; do
	if mountpoint -q "${mnt}/${d}"; then
	    umount "${mnt}/${d}" >/dev/null 2>&1 || true
	fi
    done
    if mountpoint -q "$mnt"; then
        umount "$mnt" >/dev/null 2>&1 || true
    fi
    rmdir "$mnt" >/dev/null 2>&1 || true
    # Remove all temporary files
    for temp_file in "${temp_files[@]}"; do
        rm -f "$temp_file"
    done
}

save_vars() {
    local v
    ubvarfile=$(mktemp -p "$1" ubvars.XXXXXX)
    for v in $UBOOTVARS; do
	fw_printenv $v >>$ubvarfile
    done
}

echo "Installing NVIDIA uboot bootloader update payload - $(date)" | tee -a $logfile

new_boot_part=`fw_printenv -n mender_boot_part`
mnt=`mktemp -d -t nvbup.XXXXXX`
if [ -z "$mnt" -o ! -d "$mnt" ]; then
    echo "ERR: could not create directory for mounting install partition" | tee -a $logfile >&2
    exit 1
fi
echo "Mounting /dev/mmcblk0p${new_boot_part} on $mnt" | tee -a $logfile
mount -o ro /dev/mmcblk0p${new_boot_part} "$mnt"
if [ ! -d "${mnt}/opt/ota_package" ]; then
    echo "ERR: Missing /opt/ota_package directory in installed rootfs" | tee -a $logfile >&2
    cleanup
    exit 1
fi
# tegra-bootloader-update needs access to these filesystems,
# so bind-mount them into the new rootfs for the chroot
mount --bind /sys "${mnt}/sys"
mount --bind /proc "${mnt}/proc"
mount --bind /dev "${mnt}/dev"
mount -t tmpfs tmpfs "${mnt}/run"

# Check for u-boot environment location change; save vars for restoration
# into the new environment after the update
if [ -e "$mnt/usr/share/u-boot/fw_env.config" ]; then
    if ! diff -qbi /etc/fw_env.config $mnt/usr/share/u-boot/fw_env.config > /dev/null 2>&1; then
	save_vars "${mnt}/run"
	install_fwenv=yes
    fi
fi

temp_output_file=$(mktemp -t tegraup.XXXXXX)
temp_files+=("$temp_output_file")
if ! chroot "${mnt}" /usr/bin/tegra-bootloader-update --dry-run /opt/ota_package/bl_update_payload > $temp_output_file 2>&1; then
    # If the tool reports that the version partitions are corrupted, this is an update on a tegra210
    # device with the old partition layout where the U-Boot environment overwrote the version partition(s),
    # in which case we recover via complete initialization.
    if chroot "${mnt}" /usr/bin/tegra-bootloader-update --dry-run /opt/ota_package/bl_update_payload 2>&1 | grep -q 'version partitions are corrupted'; then
	# For the recoverable case, we will have also detected a change the U-Boot environment change
	if [ -n "$install_fwenv" ]; then
	    echo "Detected bootloader partition upgrade, reinitializing" | tee -a $logfile  >&2
        temp_output_file_initlialize=$(mktemp -t tegraupinit.XXXXXX)
        temp_files+=("$temp_output_file_initlialize")
	    if ! chroot "${mnt}" /usr/bin/tegra-bootloader-update --initialize /opt/ota_package/bl_update_payload > $temp_output_file_initlialize 2>&1; then
		echo "ERR: bootloader re-initialization failed" | tee -a $logfile  >&2
        cat $temp_output_file_initlialize >&2
        cat $temp_output_file_initlialize >> $logfile
		cleanup
		exit 1
	    fi
	else
        echo "WARN: VER partitions are corrupted" | tee -a $logfile  >&2
        echo "WARN: Please refer to https://github.com/OE4T/tegra-demo-distro/pull/113 for additional context" | tee -a $logfile >&2
        echo "WARN: Attempting update anyway" | tee -a $logfile  >&2
	fi
    else
	echo "ERR: cannot perform bootloader update" | tee -a $logfile >&2
	cleanup
	exit 1
    fi
elif ! chroot "${mnt}" /usr/bin/tegra-bootloader-update /opt/ota_package/bl_update_payload > $temp_output_file 2>&1; then
    echo "ERR: bootloader update failed" | tee -a $logfile >&2
    cat $temp_output_file >&2
    cat $temp_output_file >> $logfile
    cleanup
    exit 1
fi
rm $temp_output_file
# If the U-Boot environment config has changed, propagate the important variables
# to the new environment
if [ -n "$install_fwenv" ]; then
    echo "Restoring U-Boot environment" | tee -a $logfile
    if ! chroot "${mnt}" /usr/bin/fw_setenv -c /usr/share/u-boot/fw_env.config -s /run/$(basename "$ubvarfile"); then
	echo "ERR: could not restore U-Boot environment after bootloader update" | tee -a $logfile >&2
	cleanup
	exit 1
    fi
    if [ -L /etc/fw_env.config ]; then
	cp $mnt/usr/share/u-boot/fw_env.config $(readlink /etc/fw_env.config)
    fi
fi
echo "Successful bootloader update" | tee -a $logfile
cleanup
exit 0
